package com.unitau.tgvinicius.resources;

import java.net.URI;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import com.unitau.tgvinicius.entities.Repository;
import com.unitau.tgvinicius.entities.User;
import com.unitau.tgvinicius.services.RepositoryService;

@RestController
@RequestMapping(value = "/repositories")
public class RepositoryResource {
	@Autowired
	private RepositoryService repositoryService;

	@GetMapping
	public ResponseEntity<List<Repository>> findAll() {
		List<Repository> list = repositoryService.findAll();
		return ResponseEntity.ok().body(list);
	}

	@GetMapping(value = "/{id}")
	public ResponseEntity<Repository> FindById(@PathVariable String id) {
		Repository obj = repositoryService.findById(id);
		return ResponseEntity.ok().body(obj);
	}

	@PostMapping
	public ResponseEntity<Repository> insert(@RequestBody Repository obj) {
		obj = repositoryService.insert(obj);
		URI uri = ServletUriComponentsBuilder.fromCurrentRequest().path("/{id}").buildAndExpand(obj.getId()).toUri();
		return ResponseEntity.created(uri).body(obj);
	}

	@DeleteMapping(value = "/{id}")
	public ResponseEntity<Void> delete(@PathVariable String id) {
		repositoryService.delete(id);
		return ResponseEntity.noContent().build();
	}

	@PutMapping(value = "/{id}")
	public ResponseEntity<Repository> update(@PathVariable String id, @RequestBody Repository obj) {
		obj = repositoryService.update(id, obj);
		return ResponseEntity.ok().body(obj);
	}
}
